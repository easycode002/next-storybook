"use strict";(self.webpackChunknext_storybook=self.webpackChunknext_storybook||[]).push([[952],{"./app/components/atoms/Button.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,IconOnly:()=>IconOnly,Loading:()=>Loading,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),_Button__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./app/components/atoms/Button.tsx"),_barrel_optimize_names_FiCoffee_react_icons_fi__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("__barrel_optimize__?names=FiCoffee!=!./node_modules/react-icons/fi/index.mjs"),_storybook_test__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Button",component:_Button__WEBPACK_IMPORTED_MODULE_1__.A,tags:["autodocs"],parameters:{layout:"centered"}},Default={args:{size:"large",radius:"large",color:"secondary",variant:"bordered",isDisabled:!1,isLoading:!1,children:"Button"},play:async({canvasElement})=>{const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.ux)(canvasElement).getByRole("button");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.E3)(button).toHaveTextContent("Button")}},Loading={args:{...Default.args,isLoading:!0,children:"Loading..."},play:async({canvasElement})=>{const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.ux)(canvasElement).getByRole("button");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.E3)(button).toHaveTextContent("Loading...")}},IconOnly={args:{size:"large",radius:"large",color:"secondary",variant:"bordered",isIconOnly:!0,startContent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_FiCoffee_react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.YBA,{})},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.ux)(canvasElement),button=canvas.getByRole("button");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.E3)(button).toContainElement(canvas.getByTestId("icon"))}},Disabled={args:{...Default.args,isDisabled:!0},play:async({canvasElement})=>{const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.ux)(canvasElement).getByRole("button");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.E3)(button).toBeDisabled(),await _storybook_test__WEBPACK_IMPORTED_MODULE_2__.Q4.click(button),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_2__.E3)(button).toBeDisabled()}},__namedExportsOrder=["Default","Loading","IconOnly","Disabled"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    size: "large",\n    radius: "large",\n    color: "secondary",\n    variant: "bordered",\n    isDisabled: false,\n    isLoading: false,\n    children: "Button"\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole("button");\n    expect(button).toHaveTextContent("Button");\n  }\n}',...Default.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    isLoading: true,\n    children: "Loading..."\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole("button");\n    expect(button).toHaveTextContent("Loading...");\n  }\n}',...Loading.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:'{\n  args: {\n    size: "large",\n    radius: "large",\n    color: "secondary",\n    variant: "bordered",\n    isIconOnly: true,\n    startContent: <FiCoffee />\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole(\'button\');\n    expect(button).toContainElement(canvas.getByTestId(\'icon\'));\n  }\n}',...IconOnly.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    isDisabled: true\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole("button");\n    expect(button).toBeDisabled();\n    await userEvent.click(button);\n    expect(button).toBeDisabled(); // Ensure the button is not clickable\n  }\n}',...Disabled.parameters?.docs?.source}}}}}]);